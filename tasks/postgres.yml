---
  # Parameters:
  - name: PostgreSQL | Check if is installed
    ansible.builtin.command: test -x /usr/bin/psql
    register: psql_present
    changed_when: false
    ignore_errors: yes
    tags: psql

  - name: Postgres
    block:

    - name: PostgreSQL | Add GPG key to apt keyring
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
      register: apt_key_result
      until: apt_key_result is success
      retries: 10
      when: psql_present is failed
      tags: psql
      become: true

    - name: PostgreSQL | Add apt repository
      ansible.builtin.apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present
        update_cache: yes
      tags: psql
      when: psql_present is failed
      become: true

    - name: PostgreSQL | Install
      ansible.builtin.apt:
        pkg:
          - "postgresql-{{ postgresql_version }}"
          - libpq-dev
          - python3-psycopg2
        update-cache: yes
        force: yes
        state: present
      register: package_install_result
      until: package_install_result is success
      retries: 10
      become: true
      when: psql_present is failed
      tags: psql

    - name: PostgreSQL | Ensure Service is Started
      ansible.builtin.service:
        name: "postgresql"
        state: started
        enabled: yes
      become: true
      when: docker_test is not defined
      tags: psql

    when: ansible_os_family == "Debian"

  - name: Postgres block
    block:

    - name: For troubleshouting, output ansible_python_version
      ansible.builtin.debug:
        var: "ansible_python_version"

    - name: PostgreSQL | Ensure PostgreSQL deps are installed for {{ ansible_os_family }}
      ansible.builtin.package:
        name:
          - ca-certificates
          - python-psycopg2
          - python-pycurl
          - glibc-common
          - epel-release
          - libselinux-python
        state: present
      register: deps_install_result
      until: deps_install_result is success
      when: ansible_python_version is version_compare('3','<')
      retries: 10
      become: true
      tags: psql

    - name: PostgreSQL | Ensure PostgreSQL deps are installed for {{ ansible_os_family }}
      ansible.builtin.package:
        name:
          - ca-certificates
          - python3-psycopg2
          - python3-pycurl
          - glibc-common
          - epel-release
        state: present
      register: deps_install_result
      until: deps_install_result is success
      when: ansible_python_version is version_compare('3','>=')
      retries: 10
      become: true
      tags: psql


    - name: Hint
      ansible.builtin.debug: msg="base {{ postgresql_base_version }}  expected {{ postgresql_version }}"

    - name: DEFAULT DISTRIBUTION
      block:

      - name: PostgreSQL | Ensure PostgreSQL packages are installed for {{ ansible_os_family }}
        ansible.builtin.package:
          name:
            - postgresql
            - postgresql-server
            - postgresql-contrib
            - postgresql-libs
          state: present
        register: postgres_install_result
        until: postgres_install_result is success
        retries: 10
        become: true
        tags: psql

      - name: Check if PostgreSQL database is initialized.
        ansible.builtin.stat:
          path: "{{ postgresql_data_dir }}/PG_VERSION"
        register: pgdata_dir_version
        become: true
        tags: psql

      - name: PostgreSQL | InitDB
        shell: service postgresql initdb
        when: not pgdata_dir_version.stat.exists and docker_test is not defined
        become: true
        tags:
        - psql
        - skip_ansible_lint

      - name: PostgreSQL | Check config
        shell: chkconfig postgresql on
        become: true
        when: docker_test is not defined
        tags:
        - psql
        - skip_ansible_lint

      - name: PostgreSQL | Ensure Service is Started
        ansible.builtin.service:
          name: "postgresql"
          state: started
          enabled: yes
        become: true
        when: docker_test is not defined
        tags: psql

      when: postgresql_base_version == postgresql_version # /DEFAULT DISTRIBUTION

    - name: Non standard supported by postgresql.org
      block: #  Non standard supported by postgresql.org

        - name: PostgreSQL | Override data conf paths
          ansible.builtin.set_fact:
            postgresql_config_path: "/var/lib/pgsql/{{ postgresql_version }}/data"
            postgresql_data_dir: "/var/lib/pgsql/{{ postgresql_version }}/data"
            postgresql_service_name: "postgresql-{{ postgresql_version }}"
          no_log: true
          tags:
          - psql

        - name: PostgreSQL | Repo try 3
          ansible.builtin.uri:
            url: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture | lower }}/pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}-{{ postgresql_version }}-3.noarch.rpm"
          register: repo_test3
          ignore_errors: yes
          no_log: true
          tags:
          - psql

        - name: PostgreSQL | Repo try 2
          ansible.builtin.uri:
            url: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture | lower }}/pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}-{{ postgresql_version }}-2.noarch.rpm"
          register: repo_test2
          ignore_errors: yes
          no_log: true
          tags:
          - psql
          - skip_ansible_lint

        - name: PostgreSQL | Install postgres RPM repo (first release)
          ansible.builtin.yum:
            name: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture | lower }}/pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}-{{ postgresql_version }}-1.noarch.rpm"
            state: present
          when: repo_test2.status == 404 and repo_test3.status == 404
          become: true
          tags:
          - psql
          - skip_ansible_lint

        - name: PostgreSQL | Install postgres RPM repo (Second release)
          ansible.builtin.yum:
            name: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture | lower }}/pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}-{{ postgresql_version }}-2.noarch.rpm"
            state: present
          become: true
          when: repo_test2.status == 200
          tags:
          - psql
          - skip_ansible_lint

        - name: PostgreSQL | Install postgres RPM repo (Third release)
          ansible.builtin.yum:
            name: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture | lower }}/pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}-{{ postgresql_version }}-3.noarch.rpm"
            state: present
          become: true
          when: repo_test3.status == 200
          tags:
          - psql
          - skip_ansible_lint

        - name: PostgreSQL | Install postgres packages and other deps
          ansible.builtin.yum:
            state: present
            name:
              - postgresql{{ postgresql_version | replace('.', '') }}-server
              - postgresql{{ postgresql_version | replace('.', '') }}-contrib
              - python-psycopg2
              - postgresql-libs
              - libselinux-python
          become: true
          tags:
          - psql

        - name: PostgreSQL | Initialize postgres db
          ansible.builtin.command: /usr/pgsql-{{ postgresql_version }}/bin/postgresql{{ postgresql_version | replace('.', '') }}-setup initdb
          args:
            creates: /var/lib/pgsql/{{ postgresql_version }}/data/postgresql.conf
          become: true
          tags:
          - psql

        - name: Enable and start postgres service
          ansible.builtin.service:
            name: postgresql-{{ postgresql_version }}
            enabled: yes
            state: started
          when: docker_test is not defined
          become: true
          tags:
          - psql

      when: not( postgresql_base_version == postgresql_version ) #  /Non standard supported by postgresql.org

    when: ansible_os_family in ["RedHat"]
